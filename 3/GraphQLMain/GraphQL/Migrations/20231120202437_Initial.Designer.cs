// <auto-generated />
using System;
using ConferencePlanner.GraphQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231120202437_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abstract")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.EventBuyer", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuyerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "BuyerId");

                    b.HasIndex("BuyerId");

                    b.ToTable("EventBuyer");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.EventSeller", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SellerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "SellerId");

                    b.HasIndex("SellerId");

                    b.ToTable("EventSellers");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebSite")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Event", b =>
                {
                    b.HasOne("ConferencePlanner.GraphQL.Data.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.EventBuyer", b =>
                {
                    b.HasOne("ConferencePlanner.GraphQL.Data.Buyer", "Buyer")
                        .WithMany("EventsBuyers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferencePlanner.GraphQL.Data.Event", "Event")
                        .WithMany("EventBuyers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.EventSeller", b =>
                {
                    b.HasOne("ConferencePlanner.GraphQL.Data.Event", "Event")
                        .WithMany("EventSellers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferencePlanner.GraphQL.Data.Seller", "Seller")
                        .WithMany("EventsSellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Buyer", b =>
                {
                    b.Navigation("EventsBuyers");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Event", b =>
                {
                    b.Navigation("EventBuyers");

                    b.Navigation("EventSellers");
                });

            modelBuilder.Entity("ConferencePlanner.GraphQL.Data.Seller", b =>
                {
                    b.Navigation("EventsSellers");
                });
#pragma warning restore 612, 618
        }
    }
}
